openapi: 3.0.0
info:
  title: API di AFSE
  description: API per gestire utenti, crediti, pacchetti di supereroi e scambi di carte.
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Server locale

paths:
  /user:
    post:
      summary: Crea un nuovo utente
      operationId: createUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "example@example.com"
                username:
                  type: string
                  example: "SuperUser123"
                password:
                  type: string
                  format: password
                  example: "Password123"
                favoriteSuperhero:
                  type: string
                  example: "BatMan"
                birthdate:
                  type: string
                  format: date
                country:
                  type: string
                  example: "Italy"
      responses:
        "201":
          description: Utente creato con successo, e restituito il token
        "400":
          description: Errore nella creazione, dati non validi come ad esempio email gi√† esistente o password non valida
        "500":
          description: Errore interno del server

    get:
      summary: Ottieni informazioni sull'utente autenticato
      operationId: getUser
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Dettagli dell'utente restituiti
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Non autorizzato

    put:
      summary: Aggiorna i dati dell'utente autenticato
      operationId: updateUser
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "example@example.com"
                username:
                  type: string
                  example: "SuperUser123"
                password:
                  type: string
                  format: password
                  example: "Password123"
                favoriteSuperhero:
                  type: string
                  example: "BatMan"
                birthdate:
                  type: string
                  format: date
                country:
                  type: string
                  example: "Italy"
      responses:
        "200":
          description: Utente aggiornato con successo
        "401":
          description: Non autorizzato
        "404":
          description: Utente non trovato
        "400":
          description: Errore nella richiesta

    delete:
      summary: Elimina l'account dell'utente autenticato
      operationId: deleteUser
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Utente eliminato con successo
        "401":
          description: Non autorizzato
        "500":
          description: Errore interno del server

  /user/login:
    post:
      summary: Effettua il login dell'utente
      operationId: loginUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: Login riuscito, token restituito
        "401":
          description: Credenziali errate
        "500":
          description: Errore interno del server

  /user/credits:
    put:
      summary: Aggiorna i crediti dell'utente
      operationId: updateUserCredits
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credits:
                  type: integer
                  example: 100
                creditCard:
                  type: string
                  example: "1234567890123456"
                cvc:
                  type: string
                  example: "123"
                expirationCreditCard:
                  type: string
                  example: "12/2023"
      responses:
        "200":
          description: Crediti aggiornati con successo
        "400":
          description: Dati della carta non validi
        "401":
          description: Non autorizzato
        "404":
          description: Utente non trovato

  /user/buy-superhero-package/{packId}:
    put:
      summary: Acquista un pacchetto di supereroi
      operationId: buySuperheroPackage
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: packId
          in: path
          required: true
          description: ID del pacchetto da acquistare
          schema:
            type: string
            enum: ["1", "2", "3"]
      responses:
        "200":
          description: Acquisto effettuato, pacchetto restituito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Card"
        "400":
          description: Crediti insufficienti o pacchetto non valido
        "401":
          description: Non autorizzato
        "404":
          description: Utente non trovato
        "500":
          description: Errore interno del server

  /user/cards/{email}:
    get:
      summary: Ottieni le carte di un utente
      operationId: getUserCards
      tags:
        - User
      parameters:
        - name: email
          in: path
          required: true
          description: Email dell'utente di cui ottenere le carte
          schema:
            type: string
      responses:
        "200":
          description: Carte restituite con successo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Card"
        "404":
          description: Utente non trovato
        "500":
          description: Errore interno del server

  /user/sell-cards:
    put:
      summary: Vendi carte dell'utente
      operationId: sellUserCards
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardIds:
                  type: array
                  items:
                    type: string
                  example: ["119", "220", "321"]
      responses:
        "200":
          description: Carte vendute con successo
        "400":
          description: Carte non valide
        "401":
          description: Non autorizzato
        "404":
          description: Utente non trovato
        "500":
          description: Errore interno del server

  /trade:
    post:
      summary: Crea un nuovo scambio
      operationId: createTrade
      tags:
        - Trade
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                friendMail:
                  type: string
                  format: email
                  example: "friend@example.com"
                myCard:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "101"
                      name:
                        type: string
                        example: "SpiderMan"
                wantedCard:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "393"
                      name:
                        type: string
                        example: "Ice Man"
      responses:
        "200":
          description: Scambio creato con successo
        "400":
          description: Parametri mancanti o carte non possedute
        "401":
          description: Non autorizzato
        "404":
          description: Utente non trovato
        "500":
          description: Errore interno

    get:
      summary: Ottieni tutti gli scambi dell'utente autenticato
      operationId: getTrades
      tags:
        - Trade
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista degli scambi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Trade"
        "401":
          description: Non autorizzato
        "500":
          description: Errore interno

  /trade/{tradeId}/accept:
    put:
      summary: Accetta uno scambio
      operationId: acceptTrade
      tags:
        - Trade
      security:
        - bearerAuth: []
      parameters:
        - name: tradeId
          in: path
          required: true
          schema:
            type: string
            example: "650a2f9e3b5c1a0012345678"
      responses:
        "200":
          description: Scambio accettato con successo
        "400":
          description: Scambio gi√† risposto o carte non possedute
        "401":
          description: Non autorizzato
        "404":
          description: Scambio non trovato o utenti non trovati
        "500":
          description: Errore interno

  /trade/{tradeId}/reject:
    put:
      summary: Rifiuta uno scambio
      operationId: rejectTrade
      tags:
        - Trade
      security:
        - bearerAuth: []
      parameters:
        - name: tradeId
          in: path
          required: true
          schema:
            type: string
            example: "650a2f9e3b5c1a0012345678"
      responses:
        "200":
          description: Scambio rifiutato con successo
        "400":
          description: Scambio gi√† risposto
        "401":
          description: Non autorizzato
        "404":
          description: Scambio non trovato
        "500":
          description: Errore interno

  /trade/{tradeId}/cancel:
    delete:
      summary: Cancella uno scambio
      operationId: cancelTrade
      tags:
        - Trade
      security:
        - bearerAuth: []
      parameters:
        - name: tradeId
          in: path
          required: true
          schema:
            type: string
            example: "650a2f9e3b5c1a0012345678"
      responses:
        "200":
          description: Scambio cancellato con successo
        "400":
          description: Scambio gi√† risposto
        "401":
          description: Non autorizzato
        "404":
          description: Scambio non trovato
        "500":
          description: Errore interno

  /superhero/{id}:
    get:
      summary: Ottieni informazioni su un supereroe
      operationId: getSuperhero
      tags:
        - Superhero
      parameters:
        - name: id
          in: path
          required: true
          description: ID del supereroe da ottenere
          schema:
            type: string
            example: "1009144"
      responses:
        "200":
          description: Dettagli del supereroe restituiti
        "404":
          description: Supereroe non trovato
        "500":
          description: Errore interno del server

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "650a2f9e3b5c1a0012345678"
        email:
          type: string
          format: email
          example: "example@example.com"
        username:
          type: string
          example: "SuperUser123"
        favoriteSuperhero:
          type: string
          example: "BatMan"
        birthdate:
          type: string
          format: date
        country:
          type: string
          example: "Italy"
        credits:
          type: integer
          example: 100
        cards:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Card"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Card:
      type: object
      properties:
        _id:
          type: string
          example: "10hsy7ike3b5c1a004526678"
        name:
          type: string
          example: "SpiderMan"
        img:
          type: string
          example: "https://www.example.com/spiderman.jpg"
        copy:
          type: integer
          example: 1

    Trade:
      type: object
      properties:
        _id:
          type: string
          example: "650a2f9e3b5c1a0012345678"
        fromUserId:
          type: string
          example: "wwt5yf748738yc1a001234456"
        fromUserEmail:
          type: string
          format: email
          example: "example@example.com"
        toUserId:
          type: string
          example: "tyys5yf7yu738yc1a00125356"
        toUserEmail:
          type: string
          format: email
          example: "test@test.com"
        fromUserCards:
          type: array
          items:
            type: Object
            properties:
              id:
                type: string
                example: "101"
              name:
                type: string
                example: "SpiderMan"
          example:
            [{ id: "101", name: "SpiderMan" }, { id: "403", name: "Agente X" }]
        toUserCards:
          type: array
          items:
            type: Object
            properties:
              id:
                type: string
                example: "101"
              name:
                type: string
                example: "SpiderMan"
            example:
              [{ id: "201", name: "IronMan" }, { id: "202", name: "Hulk" }]
        status:
          type: string
          enum: ["pending", "accepted", "rejected"]
          example: "pending"
